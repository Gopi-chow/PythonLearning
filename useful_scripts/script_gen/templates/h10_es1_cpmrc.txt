<::preemption_off:=: ::>


$BAUD_RATE = <::baud_rate:=:115200::>
<::com:=:serial::> baud = $BAUD_RATE
<::com:=:serial::> txdelay = 100

$XSDB = "<::xsdb_ver:=:xsdb::>"
$RC_PDI_IMAGE = "<::rc_image_path:=:None::>"
$RC_BITSTREAM="<::rc_bit:=:None::>"
$RC_TCL="<::rc_tcl:=:None::>"
$EP_PDI_IMAGE = "<::ep_image_path:=:None::>"
$EP_BITSTREAM="<::ep_bit:=:None::>"
$EP_TCL="<::ep_tcl:=:None::>"

# Create log directories for host
$dir1 = "$SYSTEST_HOST"
run "mkdir -p $LOGPATH/$dir1"
$dir2 = "$logdate"
run "mkdir -p $LOGPATH/$SYSTEST_HOST/$dir2"
$BURST_RESULTS = "$LOGPATH/$SYSTEST_HOST/$dir2"
$SERIAL_LOG = "$BURST_RESULTS/burst_serial_$SYSTEST_HOST.log"
$DEBUG_LOG = "$BURST_RESULTS/burst_debug_$SYSTEST_HOST.log"


debug append $DEBUG_LOG

#Echo all paths and configurations
print "Printing all launch information..."
print "Everest_$logdate,$BURST_HW,$RC_PDI_IMAGE,$EP_PDI_IMAGE,$RC_BITSTREAM,$EP_BITSTREAM,None,None,$BURST_ELF,$SYSTEST_HOST,$logdate1,$BURST_RUNTIME,xx,$PREEMPTABLE,IN_PROGRESS,TBD,$BURST_RESULTS,$BURST_KNOBS"
print "DA Version               :$BURST_HW"
print "RC_PDI Image             :$RC_PDI_IMAGE"
print "RC_TCL Script            :$RC_TCL"
print "EP_PDI Image             :$EP_PDI_IMAGE"
print "EP_TCL Script            :$EP_TCL"
print "EP_BITSTREAM             :$EP_BITSTREAM"
print "BOARD                    :$SYSTEST_HOST"
print "BURST KNOBS              :$BURST_KNOBS"
print "BURST runtime            :$BURST_RUNTIME seconds"
print "BURST elf                :$BURST_ELF"
print "BURST results            :$BURST_RESULTS"
print "Job ID                   :$LSB_JOBID"
<::board_serial_num:=: ::>

power 0
sleep 2
power 1
sleep 2

<::__SUB_TEMPLATE__vcc_aux_test__:=:No::>

record <::com:=:serial::> append $SERIAL_LOG

# launch xsdb
fork "$XSDB" as my_xsdb
my_xsdb echo = 1

test
	sleep 5
	wait
	when my_xsdb matches "xsdb%"
		print "Forking xsdb completed"
		continue
	end
	after 2 minutes
		print "FAILURE: Forking xsdb failed"
                close
		exit
	end
endtest

print my_xsdb "connect"
sleep 5
print my_xsdb "targets -set -filter {name =~ \"*PMC*\" && jtag_cable_name =~ \"*VP-X-A2785*\"}"
print my_xsdb "targets"                 # List all cores
sleep 2

print my_xsdb "puts \"Programing RC $RC_PDI_IMAGE\""
print my_xsdb "device program $RC_PDI_IMAGE"

$match = 0
test
        sleep 5
        wait
        when my_xsdb matches "100%"
                if run "[ \"$match\" == \"0\" ]" then
                        $match = 1
                        print "RC PDI image loaded and PMCFW completed"
                        continue
                endif
        end
        when my_xsdb matches "No supported device"
                fail "Couldn't load PDI or PMCFW issue"
        end
        when my_xsdb inactive 5 minutes
                fail "Couldn't load PDI or PMCFW issue"
        end
        on failure
                print my_xsdb "device status jtag_status"
                sleep 2
                print my_xsdb "device status error_status"
                sleep 2
                print "FAILURE: $0"
                close
                exit
        end
endtest
sleep 2
my_xsdb history="clear"

# Add any workarounds that needs to be done before BURST dow here

<::__SUB_TEMPLATE__h10_es1_h10_ep_dow__:=:No::>
<::__SUB_TEMPLATE__h10_es2_vpk120_ep_dow__:=:No::>
<::__SUB_TEMPLATE__everest_es1_cpm_ep_dow__:=:No::>
<::__SUB_TEMPLATE__everest_es1_k7_ep_dow__:=:No::>

# Take <::proc::> out of reset and download BURST elf
<::__SUB_TEMPLATE__h10_a72_ta_sel__:=:No::>
<::__SUB_TEMPLATE__h10_r5_ta_sel__:=:No::>
print my_xsdb "<::rst_type::>"
print my_xsdb "puts [mrd -force 0xFCE20E1C]"
print my_xsdb "dow -force $BURST_ELF"

test
	sleep 5
	wait
	when my_xsdb matches "Successfully downloaded .*burstarm.*"
		continue
	end
	when my_xsdb matches "Failed to download .*burstarm.*"
		fail "BURST elf download failed"
	end
	when my_xsdb inactive 2 minutes
		fail "BURST not started"
	end
	on failure
                print "FAILURE: $0"
                close
		exit
	end
endtest
print my_xsdb "after 500"
<::preemption_on:=: ::>
print my_xsdb "con"
print my_xsdb "exit"

