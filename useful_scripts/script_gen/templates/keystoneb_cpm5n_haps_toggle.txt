<::com:=:serial::> baud=115200
<::com:=:serial::> txdelay=100

$BUILD_DIR = "<::build_dir:=:/everest/sivhw_rel_bkup/proj/everest/ipp/N60_CPM5N_IPP/$BURST_HW::>"
$HAPS_DOW = "<::haps_dow:=:$BUILD_DIR/run_scripts::>/download.systest"
$XSDB = "<::xsdb_ver:=:/everest/sivhw_bkup/tools/xilinx/2021.2_INT_0727_0226/installs/lin64/Vitis/2021.2/bin/xsdb::>"
$PDI_IMAGE = "<::image_path:=:$BUILD_DIR/user_pl/vck190::>"
$ATTRIB_ELF = "<::attribelf_path:=:$BUILD_DIR/firmware/elfs::>"

# Create log directories for host
$dir1 = "$SYSTEST_HOST-$SYSTEST_SESSION"
run "mkdir -p $LOGPATH/$dir1"
$dir2 = "$logdate"
run "mkdir -p $LOGPATH/$dir1/$dir2"
$BURST_RESULTS = "$LOGPATH/$dir1/$dir2"
$SERIAL_LOG = "$BURST_RESULTS/burst_serial_$SYSTEST_HOST.log"
$DEBUG_LOG = "$BURST_RESULTS/burst_debug_$SYSTEST_HOST.log"

if run "[ \"$NO_HAPS_DOWNLOAD\" != \"1\" ]" then
	power 0
	sleep 2
	power 1
	sleep 2
endif
cleankeys
sleep 5

<::__SUB_TEMPLATE__vcc_aux_test__:=:No::>

debug append $DEBUG_LOG

#Echo all paths and configurations
print "Printing all launch information..."
print "HAPS_$logdate,$BURST_HW,$PDI_IMAGE,$ATTRIB_ELF,$BURST_ELF,$SYSTEST_HOST-$SYSTEST_SESSION,$logdate1,$BURST_RUNTIME,xx,$PREEMPTABLE,IN_PROGRESS,$BURST_RESULTS,$BURST_KNOBS"
print "IPP version              :$BURST_HW"
print "PDI Image                :$PDI_IMAGE"
print "ATTRIB elf               :$ATTRIB_ELF"
print "BOARD                    :$SYSTEST_HOST-$SYSTEST_SESSION"
print "BURST KNOBS              :$BURST_KNOBS"
print "BURST run time           :$BURST_RUNTIME seconds"
print "BURST elf                :$BURST_ELF"
print "BURST results            :$BURST_RESULTS"
print "Job ID                   :$LSB_JOBID" 
print "NO Haps Download	        :$NO_HAPS_DOWNLOAD"

sleep 5
cd "$BURST_RESULTS"

# Kill confprosh fork
if run "[ \"$NO_HAPS_DOWNLOAD\" != \"1\" ]" then
	print "starting haps"
	if running my_haps then
        	kill my_haps
        	sleep 1
	endif
	print "Starting haps"
	fork "confprosh" as my_haps
	my_haps echo = 1
	sleep 3
endif

# Kill xsdb fork
if running my_xsdb then
        kill my_xsdb
        sleep 1
endif

if run "[ \"$NO_HAPS_DOWNLOAD\" != \"1\" ]" then
	$match = 0
	print my_haps "source $HAPS_DOW"
	test
		sleep 5
		wait
		when my_haps matches "toggle reset"
			if run "[ \"$match\" == \"0\" ]" then
				$match = 1
				print "HAPS download completed"
				continue
			endif
		end
	
		when my_haps matches "Error configuring*"
			fail "HAPS download failed"
		end
		when my_haps inactive 5 minutes
			fail "HAPS download is too slow or error while downloading"
		end
		after 10 minutes
			fail "HAPS dowload is taking more than 20 min"
		end
		on failure
			print "FAILURE: $0"
			#Clearing the FPGA's
			print my_haps "exit"
			#Changing the current working directory
			cd "$BURST_HOME"
			close
			exit
		end
	endtest
endif

record <::com:=:serial::> append $SERIAL_LOG

com2 echo = 1
print com2 ""
sleep 1
print com2 "sc_app -c setclock -t 'User1 FMC1 Si570' -v 156250000"
print com2 "sc_app -c getclock -t 'User1 FMC1 Si570'"

<::preemption_off:=: ::>
# launch xsdb
fork "$XSDB" as my_xsdb
my_xsdb echo = 1

$match1 = 0
test
        sleep 5
        wait
        when my_xsdb matches "xsdb%"
		if run "[ \"$match1\" == \"0\" ]" then
			$match1 = 1
                	print "Forking xsdb completed"
                	continue
		endif
        end
        after 2 minutes
                fail "Forking xsdb failed"
        end
        on failure
                print "FAILURE: $0"
                #Clearing the FPGA's
                print my_haps "exit"
                #Changing the current working directory
                cd "$BURST_HOME"
                close
                exit
        end
endtest
# Take <::proc::> out of reset and download BURST elf
print my_xsdb "source $CLUSTER_HOME/etc/xsdb_init.tcl"
print my_xsdb "hw_server"
print my_xsdb "conn"
sleep 5

if run "[ \"$NO_HAPS_DOWNLOAD\" == \"1\" ]" then
	print my_xsdb "targets -set -filter {name =~ \"DPC\"}"
	print my_xsdb "rst -type pmc-por"
	sleep 10
	print my_haps "toggle_reset"
endif

print my_xsdb "exec sleep 2"
print my_xsdb "targets"
print my_xsdb "targets -set -filter {name =~ \"PMC\"}"
print my_xsdb "targets"

print my_xsdb "device program $PDI_IMAGE"
$match2 = 0
test
        wait
        when my_xsdb matches "100%"
		if run "[ \"$match2\" == \"0\" ]" then
			$match2 = 1
                	print "PDI image loaded and PMCFW completed"
                	continue
		endif
        end
        when my_xsdb matches "No supported device"
                fail "Couldn't load PDI or PMCFW issue"
        end
        when my_xsdb inactive 5 minutes
                fail "Couldn't load PDI or PMCFW issue"
        end
        on failure
                print "FAILURE: $0"
                print my_xsdb "exit"
                print my_haps "exit"
                #Changing the current working directory
                cd "$BURST_HOME"
                close
                exit
        end
endtest


<::__SUB_TEMPLATE__spp_a72_ta_sel__:=:No::>
<::__SUB_TEMPLATE__r5_ta_sel__:=:No::>

print my_xsdb "rst -proc"
print my_xsdb "puts \" TBUS LINK CHECK \" "
print my_xsdb "puts [mrd -force 0xBB000000]"

$match3 = 0
test
	sleep 1
	wait
	when my_xsdb matches "BB000000:   0000000F"
		if run "[ \"$match3\" == \"0\" ]" then
			$match3 = 1
			print "TBUS LINKUP SUCCESSFUL"
			continue
		endif
	end
	when my_xsdb matches "BB000000:   00000000"
		fail "TBUS LINKUP FAILED"
	end
	when my_xsdb inactive 2 minutes
		fail "NO TBUS LINKUP after 2minutes"
	end
	on failure
		print "FAILURE: $0"
		#Clearing the FPGA's
		print my_xsdb "exit"
                print my_haps "exit"
		#Changing the current working directory
		cd "$BURST_HOME"
		close
		exit
	end
endtest
sleep 1

print my_xsdb "dow -force $ATTRIB_ELF"
sleep 5
print my_xsdb "con"
sleep 3
print my_xsdb "stop"
print my_xsdb "rst -proc"
sleep 2
print my_xsdb "source /group/siv_burst/proj/ksb/cpm5n/releases/scripts/ipp_cpm5n_4.0/v4.1/rtc_pmc_hacks.tcl"
sleep 2
print my_xsdb "dow -force $BURST_ELF"
$match4 = 0
test
	sleep 5
	wait
	when my_xsdb matches "Successfully downloaded .*burstarm.*"
		if run "[ \"$match4\" == \"0\" ]" then
			$match4 = 1
			continue
		endif
	end
	when my_xsdb matches "Failed to download .*burstarm.*"
		fail "BURST elf download failed"
	end
	when my_xsdb inactive 2 minutes
		fail "BURST not started"
	end
	on failure
                print "FAILURE: $0"
                #Clearing the FPGA's
		print my_xsdb "exit"
                print my_haps "exit"
                #Changing the current working directory
                cd "$BURST_HOME"
                close
		exit
	end
endtest
<::preemption_on:=: ::>
print my_xsdb "con"
#Prevents HAPS from being exiting in the case
#NO_HAPS_DOWNLOAD is not default ""
if run "[ \"$NO_HAPS_DOWNLOAD\" == \"n\" ]" then
	print my_haps "exit"
endif
