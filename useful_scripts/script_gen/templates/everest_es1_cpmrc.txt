<::preemption_off:=: ::>
power 0
sleep 2
power 1
sleep 2

$BAUD_RATE = <::baud_rate:=:115200::>
<::com:=:serial::> baud = $BAUD_RATE
<::com:=:serial::> txdelay = 100

$XSDB = "<::xsdb_ver:=:xsdb::>"
$RC_PDI_IMAGE = "<::rc_image_path:=:None::>"
$RC_BITSTREAM="<::rc_bit:=:None::>"
$EP_PDI_IMAGE = "<::ep_image_path:=:None::>"
$EP_BITSTREAM="<::ep_bit:=:None::>"
# Create log directories for host
$dir1 = "$SYSTEST_HOST"
run "mkdir -p $LOGPATH/$dir1"
$dir2 = "$logdate"
run "mkdir -p $LOGPATH/$SYSTEST_HOST/$dir2"
$BURST_RESULTS = "$LOGPATH/$SYSTEST_HOST/$dir2"
$SERIAL_LOG = "$BURST_RESULTS/burst_serial_$SYSTEST_HOST.log"
$DEBUG_LOG = "$BURST_RESULTS/burst_debug_$SYSTEST_HOST.log"

if run "[ \"$XSDB\" == \"xsdb\" ] || [ \"$WHICH_XSDB\" == \"$XSDB\" ]" then
   $WHICH_XSDB := "which xsdb"
else
   $WHICH_XSDB = "$XSDB"
endif

record <::com:=:serial::> append $SERIAL_LOG
debug append $DEBUG_LOG

#Echo all paths and configurations
print "Printing all launch information..."
print "Everest_$logdate,$BURST_HW,$RC_PDI_IMAGE,$EP_PDI_IMAGE,$RC_BITSTREAM,$EP_BITSTREAM,None,None,$BURST_ELF,$SYSTEST_HOST,$logdate1,$BURST_RUNTIME,xx,$PREEMPTABLE,IN_PROGRESS,TBD,$BURST_RESULTS,$BURST_KNOBS"
print "DA Version               :$BURST_HW"
print "RC_PDI Image             :$RC_PDI_IMAGE"
print "EP_PDI Image             :$EP_PDI_IMAGE"
print "EP_BITSTREAM             :$EP_BITSTREAM"
print "BOARD                    :$SYSTEST_HOST"
print "BURST KNOBS              :$BURST_KNOBS"
print "BURST runtime            :$BURST_RUNTIME seconds"
print "BURST elf                :$BURST_ELF"
print "BURST results            :$BURST_RESULTS"
print "XSDB Version             :$WHICH_XSDB"
print "Job ID                   :$LSB_JOBID" 
<::board_serial_num:=: ::>

sleep 1
<::__SUB_TEMPLATE__vcc_aux_test__:=:No::>

# launch xsdb
fork "$XSDB" as my_xsdb
my_xsdb echo = 1

test
	sleep 5
	wait
	when my_xsdb matches "xsdb%"
		print "Forking xsdb completed"
		continue
	end
	after 2 minutes
		print "FAILURE: Forking xsdb failed"
                close
		exit
	end
endtest

print my_xsdb "connect"
print my_xsdb "target"
print my_xsdb "after 500"
print my_xsdb "targets -set -filter {name =~ \"*PMC*\" && jtag_cable_name =~ \"*VC-P-A2197*\"}"
sleep 2

print my_xsdb "device program $RC_PDI_IMAGE"
test
        sleep 5
        wait
        when my_xsdb matches "100%"
                print "PDI image loaded and PMCFW completed"
                continue
        end
        when my_xsdb matches "No supported device"
                fail "Couldn't load PDI or PMCFW issue"
        end
        when my_xsdb inactive 5 minutes
                fail "Couldn't load PDI or PMCFW issue"
        end
        on failure
                print my_xsdb "device status jtag_status"
                sleep 2
                print my_xsdb "device status error_status"
                sleep 2
                print "FAILURE: $0"
                close
                exit
        end
endtest

print my_xsdb "targets -set -filter {name =~ \"*Versal*\" && jtag_cable_name =~ \"*VC-P-A2197*\"}"
sleep 2

print "CPM_CRCPM register dump!!!!!"
print my_xsdb "puts [mrd -force 0xFCA00000 85]"
print my_xsdb "puts [mrd -force 0xFCA00300 11]"
print "CPM_PCSR register dump!!!!"
print my_xsdb "puts [mrd -force 0xFCFF0000 4]"
print my_xsdb "puts [mrd -force 0xFCFF0020 1]"
print my_xsdb "puts [mrd -force 0xFCFF0030 1]"
print "CPM_SLCR register dump!!!!"
print my_xsdb "puts [mrd -force 0xFCA10000 69]"
print my_xsdb "puts [mrd -force 0xFCA10200 6]"
print my_xsdb "puts [mrd -force 0xFCA10300 75]"
print my_xsdb "puts [mrd -force 0xFCA10500 4]"
print my_xsdb "puts [mrd -force 0xFCA10600 8]"
print "PCIe Attr_0 register dump!!!"
print my_xsdb "puts [mrd -force 0xFCA50000 1]"
print my_xsdb "puts [mrd -force 0xFCA50010 6]"
print my_xsdb "puts [mrd -force 0xFCA50030 756]"
print my_xsdb "puts [mrd -force 0xFCA50E00 40]"
print "PCIe_DMA Attr register dump!!!"
print my_xsdb "puts [mrd -force 0xFCA70000 1]"
print my_xsdb "puts [mrd -force 0xFCA70014 594]"
print my_xsdb "puts [mrd -force 0xFCA70E00 3]"

# Add any workarounds that needs to be done before BURST dow here
<::__SUB_TEMPLATE__everest_es1_k7_ep_dow__:=:No::>
<::__SUB_TEMPLATE__everest_es1_cpm_ep_dow__:=:No::>
# Take <::proc::> out of reset and download BURST elf
<::__SUB_TEMPLATE__everest_es1_a72_sel__:=:No::>
<::__SUB_TEMPLATE__everest_es1_r5_sel__:=:No::>
print my_xsdb "<::rst_type::>"
print my_xsdb "targets"     
sleep 2
print my_xsdb "dow -force $BURST_ELF"

test
	sleep 5
	wait
	when my_xsdb matches "Successfully downloaded .*burstarm.*"
		continue
	end
	when my_xsdb matches "Failed to download .*burstarm.*"
		fail "BURST elf download failed"
	end
	when my_xsdb inactive 2 minutes
		fail "BURST not started"
	end
	on failure
                print "FAILURE: $0"
                close
		exit
	end
endtest
<::preemption_on:=: ::>
print my_xsdb "con"
print my_xsdb "exit"

